syntax = "proto3";

package yandex.cloud.serverless.containers.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/duration.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/serverless/containers/v1/container.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/containers/v1;containers";
option java_package = "yandex.cloud.api.serverless.containers.v1";

service ContainerService {
  rpc Get (GetContainerRequest) returns (Container) {
    option (google.api.http) = { get: "/containers/v1/containers/{container_id}" };
  };

  rpc List (ListContainersRequest) returns (ListContainersResponse) {
    option (google.api.http) = { get: "/containers/v1/containers" };
  };

  rpc Create (CreateContainerRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/containers/v1/containers" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateContainerMetadata"
      response: "Container"
    };
  };

  rpc Update (UpdateContainerRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/containers/v1/containers/{container_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateContainerMetadata"
      response: "Container"
    };
  };

  rpc Delete (DeleteContainerRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/containers/v1/containers/{container_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteContainerMetadata"
      response: "google.protobuf.Empty"
    };
  };

  rpc DeployRevision (DeployContainerRevisionRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/containers/v1/revisions:deploy" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeployContainerRevisionMetadata"
      response: "Revision"
    };
  }

  rpc Rollback (RollbackContainerRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/containers/v1/containers/{container_id}:rollback" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "RollbackContainerMetadata"
      response: "Container"
    };
  }

  rpc GetRevision (GetContainerRevisionRequest) returns (Revision) {
    option (google.api.http) = { get: "/containers/v1/revisions/{container_revision_id}" };
  }

  rpc ListRevisions (ListContainersRevisionsRequest) returns (ListContainersRevisionsResponse) {
    option (google.api.http) = { get: "/containers/v1/revisions" };
  }

  rpc ListOperations (ListContainerOperationsRequest) returns (ListContainerOperationsResponse) {
    option (google.api.http) = { get: "/containers/v1/containers/{container_id}/operations" };
  }

  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = { get: "/containers/v1/containers/{resource_id}:listAccessBindings" };
  }

  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/containers/v1/containers/{resource_id}:setAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/containers/v1/containers/{resource_id}:updateAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetContainerRequest {
  string container_id = 1 [(required) = true];
}

message ListContainersRequest {
  string folder_id = 1 [(required) = true];
  int64 page_size = 2;
  string page_token = 3;
  string filter = 4;
}

message ListContainersResponse {
  repeated Container containers = 1;
  string next_page_token = 2;
}

message CreateContainerRequest {
  string folder_id = 1 [(required) = true];
  string name = 2 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 3 [(length) = "<=256"];
  map<string, string> labels = 4 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
}

message CreateContainerMetadata {
  string container_id = 1;
}

message UpdateContainerRequest {
  string container_id = 1 [(required) = true];
  google.protobuf.FieldMask update_mask = 2;

  string name = 3 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 4 [(length) = "<=256"];
  map<string, string> labels = 5 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
}

message UpdateContainerMetadata {
  string container_id = 1;
}

message DeleteContainerRequest {
  string container_id = 1 [(required) = true];
}

message DeleteContainerMetadata {
  string container_id = 1;
}

message GetContainerRevisionRequest {
  string container_revision_id = 1 [(required) = true];
}

message ListContainersRevisionsRequest {
  oneof id {
    option (exactly_one) = true;
    string folder_id = 1;
    string container_id = 2;
  };
  int64 page_size = 3 [(value) = "0-1000"];
  string page_token = 4 [(length) = "<=100"];
  string filter = 5 [(length) = "<=1000"];
}

message ListContainersRevisionsResponse {
  repeated Revision revisions = 1;
  string next_page_token = 2;
}


message DeployContainerRevisionRequest {
  string container_id = 1 [(required) = true];
  string description = 3;
  Resources resources = 5 [(required) = true];
  google.protobuf.Duration execution_timeout = 6 [(value) = "<=600s"];
  string service_account_id = 7;
  ImageSpec image_spec = 8 [(required) = true];
  int64 concurrency = 9;
  repeated Secret secrets = 10;
  Connectivity connectivity = 11;
  ProvisionPolicy provision_policy = 12;
}

message ImageSpec {
  string image_url = 1 [(required) = true];
  Command command = 2;
  Args args = 3;
  map<string, string> environment = 4 [(length) = "<=4096", (map_key).pattern = "[a-zA-Z][a-zA-Z0-9_]*"];
  string working_dir = 5;
}


message DeployContainerRevisionMetadata {
  string container_revision_id = 1;
}

message RollbackContainerRequest {
  string container_id = 1 [(required) = true];
  string revision_id = 2 [(required) = true];
}

message RollbackContainerMetadata {
  string container_id = 1;
  string revision_id = 2;
}

message ListContainerOperationsRequest {
  string container_id = 1 [(required) = true];
  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=100"];
  string filter = 4 [(length) = "<=1000"];
}

message ListContainerOperationsResponse {
  repeated operation.Operation operations = 1;
  string next_page_token = 2;
}
