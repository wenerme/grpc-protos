syntax = "proto3";

package yandex.cloud.ai.assistants.v1.searchindex;

import "yandex/cloud/ai/common/common.proto";
import "yandex/cloud/ai/assistants/v1/searchindex/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/assistants/v1/searchindex;searchindex";
option java_package = "yandex.cloud.api.ai.assistants.v1.searchindex";

// Represents a search index used to store and query data, either using traditional keyword-based text search or vector-based search mechanisms.
message SearchIndex {
  // Unique identifier of the search index.
  string id = 1;

  // ID of the folder that the search index belongs to.
  string folder_id = 2;

  // Name of the search index.
  string name = 3;

  // Description of the search index.
  string description = 4;

  // Identifier of the subject who created this search index.
  string created_by = 5;

  // Timestamp representing when the search index was created.
  google.protobuf.Timestamp created_at = 6;

  // Identifier of the subject who last updated this search index.
  string updated_by = 7;

  // Timestamp representing the last time this search index was updated.
  google.protobuf.Timestamp updated_at = 8;

  // Configuration for the expiration of the search index, defining when and how the search index will expire.
  yandex.cloud.ai.common.ExpirationConfig expiration_config = 9;

  // Timestamp representing when the search index will expire.
  google.protobuf.Timestamp expires_at = 10;

  // Set of key-value pairs that can be used to organize and categorize the search index.
  map<string, string> labels = 11;

  // Type of the search index. It can be either a traditional keyword-based text search or a vector-based search.
  oneof IndexType {
    // Keyword-based text search index configuration.
    // This type of index is used for traditional text search, where documents are indexed based on their keywords.
    TextSearchIndex text_search_index = 12;

    // Vector-based search index configuration.
    // This type is used for vector search, where documents are indexed using vector embeddings.
    VectorSearchIndex vector_search_index = 13;
  }
}

// Defines the configuration for a traditional keyword-based text search index.
message TextSearchIndex {
  // Chunking strategy used to split text into smaller chunks before indexing.
  ChunkingStrategy chunking_strategy = 1;
}

// Defines the configuration for a vector-based search index. This type uses embeddings to represent documents and queries.
message VectorSearchIndex {
  // The [ID of the model](/docs/foundation-models/concepts/embeddings) to be used for obtaining document text embeddings.
  string doc_embedder_uri = 1;

  // The [ID of the model](/docs/foundation-models/concepts/embeddings) to be used for obtaining query text embeddings.
  string query_embedder_uri = 2;

  // Chunking strategy used to split text into smaller chunks before indexing.
  ChunkingStrategy chunking_strategy = 3;
}
