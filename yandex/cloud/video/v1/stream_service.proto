syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/video/v1/stream.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Stream management service.
service StreamService {
  // Returns the specific stream.
  rpc Get(GetStreamRequest) returns (Stream) {
    option (google.api.http) = {
      get: "/video/v1/streams/{stream_id}"
    };
  }

  // List streams for channel.
  rpc List(ListStreamsRequest) returns (ListStreamsResponse) {
    option (google.api.http) = {
      get: "/video/v1/streams"
    };
  }

  // Create stream.
  rpc Create(CreateStreamRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streams"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateStreamMetadata"
      response: "Stream"
    };
  }

  // Update stream.
  rpc Update(UpdateStreamRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/streams/{stream_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateStreamMetadata"
      response: "Stream"
    };
  }

  // Delete stream.
  rpc Delete(DeleteStreamRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/streams/{stream_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteStreamMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Perform an action on the episode.
  rpc PerformAction(PerformStreamActionRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streams/{stream_id}:performAction"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "PerformStreamActionMetadata"
      response: "Stream"
    };
  }
}

message GetStreamRequest {
  // ID of the stream.
  string stream_id = 1;
}

message ListStreamsRequest {
  reserved 2 to 99;
  // ID of the channel.
  string channel_id = 1;

  // The maximum number of the results per page to return. Default value: 100.
  int64 page_size = 100;
  // Page token for getting the next page of the result.
  string page_token = 101;

  // By which column the listing should be ordered and in which direction,
  // format is "createdAt desc". "id asc" if omitted.
  // Possible fields: ["id", "title", "startTime", "finishTime", "createdAt", "updatedAt"]
  // Both snake_case and camelCase are supported for fields.
  string order_by = 102;

  // Filter expression that filters resources listed in the response.
  // Expressions are composed of terms connected by logic operators.
  // Value in quotes: `'` or `"`
  // Example: "key1='value' AND key2='value'"
  // Supported operators: ["AND"].
  // Supported fields: ["title", "lineId", "status"]
  // Both snake_case and camelCase are supported for fields.
  string filter = 103;
}

message ListStreamsResponse {
  reserved 2 to 99;
  // List of streams for channel.
  repeated Stream streams = 1;

  // Token for getting the next page.
  string next_page_token = 100;
}

message CreateStreamRequest {
  reserved 201 to 999;
  reserved 6 to 199;
  // ID of the channel.
  string channel_id = 1;

  // ID of the line.
  string line_id = 2;
  // Stream title.
  string title = 3;
  // Stream description.
  string description = 4;
  // ID of the thumbnail.
  string thumbnail_id = 5;

  // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
  map<string, string> labels = 200;

  // Stream type.
  oneof stream_type {
    // On demand stream. It starts immediately when a signal appears.
    OnDemandParams on_demand = 1000;
    // Schedule stream. Determines when to start receiving the signal or finish time.
    ScheduleParams schedule = 1001;
  }
}

message OnDemandParams {}

message ScheduleParams {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp finish_time = 2;
}

message CreateStreamMetadata {
  // ID of the stream.
  string stream_id = 1;
}

message UpdateStreamRequest {
  reserved 201 to 999;
  reserved 7 to 199;
  // ID of the stream.
  string stream_id = 1;
  // Field mask that specifies which fields of the stream are going to be updated.
  google.protobuf.FieldMask field_mask = 2;

  // ID of the line.
  string line_id = 3;
  // Stream title.
  string title = 4;
  // Stream description.
  string description = 5;
  // ID of the thumbnail.
  string thumbnail_id = 6;

  // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
  map<string, string> labels = 200;

  // Stream type.
  oneof stream_type {
    // On demand stream. It starts immediately when a signal appears.
    OnDemandParams on_demand = 1000;
    // Schedule stream. Determines when to start receiving the signal or finish time.
    ScheduleParams schedule = 1001;
  }
}

message UpdateStreamMetadata {
  // ID of the stream.
  string stream_id = 1;
}

message DeleteStreamRequest {
  // ID of the stream.
  string stream_id = 1;
}

message DeleteStreamMetadata {
  // ID of the stream.
  string stream_id = 1;
}

message PerformStreamActionRequest {
  reserved 2 to 999;
  reserved 1001;

  // ID of the stream.
  string stream_id = 1;
  oneof action {
    PublishAction publish = 1000;
    StopAction stop = 1002;
  }
}

message PublishAction {}

message StopAction {}

message PerformStreamActionMetadata {
  // ID of the stream.
  string stream_id = 1;
}
