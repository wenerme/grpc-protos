syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/video/v1/episode.proto";
import "yandex/cloud/video/v1/manifest.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Episode management service.
service EpisodeService {
  // Returns the specific channel.
  rpc Get(GetEpisodeRequest) returns (Episode) {
    option (google.api.http) = {
      get: "/video/v1/episodes/{episode_id}"
    };
  }

  // List episodes for stream or line.
  rpc List(ListEpisodesRequest) returns (ListEpisodesResponse) {
    option (google.api.http) = {
      get: "/video/v1/episodes"
    };
  }

  // Create episode.
  rpc Create(CreateEpisodeRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/episodes"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateEpisodeMetadata"
      response: "Episode"
    };
  }

  // Update episode.
  rpc Update(UpdateEpisodeRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/episodes/{episode_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateEpisodeMetadata"
      response: "Episode"
    };
  }

  // Delete episode.
  rpc Delete(DeleteEpisodeRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/episodes/{episode_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteEpisodeMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Perform an action on the episode.
  rpc PerformAction(PerformEpisodeActionRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/episodes/{episode_id}:performAction"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "PerformEpisodeActionMetadata"
      response: "Episode"
    };
  }

  // Returns url to the player.
  rpc GetPlayerURL(GetEpisodePlayerURLRequest) returns (GetEpisodePlayerURLResponse) {
    option (google.api.http) = {
      get: "/video/v1/episodes/{episode_id}:getPlayerUrl"
    };
  }

  // Returns manifest urls.
  rpc GetManifests(GetEpisodeManifestsRequest) returns (GetEpisodeManifestsResponse) {
    option (google.api.http) = {
      get: "/video/v1/episodes/{episode_id}:getManifests"
    };
  }
}

message GetEpisodeRequest {
  // ID of the episode.
  string episode_id = 1;
}

message ListEpisodesRequest {
  reserved 3 to 99;
  oneof parent_id {
    // ID of the stream.
    string stream_id = 1;
    // ID of the line.
    string line_id = 2;
  }

  // The maximum number of the results per page to return. Default value: 100.
  int64 page_size = 100;
  // Page token for getting the next page of the result.
  string page_token = 101;

  // By which column the listing should be ordered and in which direction,
  // format is "createdAt desc". "id asc" if omitted.
  // Possible fields: ["id", "createdAt", "updatedAt"]
  // Both snake_case and camelCase are supported for fields.
  string order_by = 102;

  // Filter expression that filters resources listed in the response.
  // Expressions are composed of terms connected by logic operators.
  // Value in quotes: `'` or `"`
  // Example: "key1='value' AND key2='value'"
  // Supported operators: ["AND"].
  // Supported fields: ["title"]
  // Both snake_case and camelCase are supported for fields.
  string filter = 103;
}

message ListEpisodesResponse {
  reserved 2 to 99;
  // List of episodes for specific parent_id.
  repeated Episode episodes = 1;

  // Token for getting the next page.
  string next_page_token = 100;
}

message CreateEpisodeRequest {
  reserved 102 to 999;
  reserved 8 to 99;
  reserved 1, 1001;

  oneof parent_id {
    // ID of the stream.
    string stream_id = 100;
    // ID of the line.
    string line_id = 101;
  }

  // Episode title.
  string title = 2;
  // Episode description.
  string description = 3;
  // ID of the thumbnail.
  string thumbnail_id = 4;
  // Episode start time.
  google.protobuf.Timestamp start_time = 5;
  // Episode finish time.
  google.protobuf.Timestamp finish_time = 6;
  // Enables episode DVR mode. DVR seconds determines how many last seconds of the stream are available.
  //
  // possible values:
  //  * `0`: infinite dvr size, the full length of the stream allowed to display
  //  * `>0`: size of dvr window in seconds, the minimum value is 30s
  int64 dvr_seconds = 7;

  // Episode access rights.
  oneof access_rights {
    // Episode is available to everyone.
    EpisodePublicAccessParams public_access = 1000;
    // Checking access rights using the authorization system.
    EpisodeAuthSystemAccessParams auth_system_access = 1002;
  }
}

message EpisodePublicAccessParams {}

message EpisodeAuthSystemAccessParams {}

message CreateEpisodeMetadata {
  // ID of the episode.
  string episode_id = 1;
}

message UpdateEpisodeRequest {
  reserved 9 to 999;
  reserved 1001;

  // ID of the episode.
  string episode_id = 1;
  // Field mask that specifies which fields of the episode are going to be updated.
  google.protobuf.FieldMask field_mask = 2;

  // Episode title.
  string title = 3;
  // Episode description.
  string description = 4;
  // ID of the thumbnail.
  string thumbnail_id = 5;
  google.protobuf.Timestamp start_time = 6;
  // Episode finish time.
  google.protobuf.Timestamp finish_time = 7;
  // Enables episode DVR mode. DVR seconds determines how many last seconds of the stream are available.
  //
  // possible values:
  //  * `0`: infinite dvr size, the full length of the stream allowed to display
  //  * `>0`: size of dvr window in seconds, the minimum value is 30s
  int64 dvr_seconds = 8;

  // Episode access rights.
  oneof access_rights {
    // Episode is available to everyone.
    EpisodePublicAccessParams public_access = 1000;
    // Checking access rights using the authorization system.
    EpisodeAuthSystemAccessParams auth_system_access = 1002;
  }
}

message UpdateEpisodeMetadata {
  // ID of the episode.
  string episode_id = 1;
}

message DeleteEpisodeRequest {
  // ID of the episode.
  string episode_id = 1;
}

message DeleteEpisodeMetadata {
  // ID of the episode.
  string episode_id = 1;
}

message PerformEpisodeActionRequest {
  reserved 2 to 999;
  reserved 1000, 1001;

  // ID of the episode.
  string episode_id = 1;
  oneof action {
    PublishEpisodeAction publish = 1002;
    UnpublishEpisodeAction unpublish = 1003;
  }
}

message PublishEpisodeAction {}

message UnpublishEpisodeAction {}

message PerformEpisodeActionMetadata {
  // ID of the episode.
  string episode_id = 1;
}

message GetEpisodePlayerURLRequest {
  // ID of the episode.
  string episode_id = 1;
  EpisodePlayerParams params = 2;
}

message EpisodePlayerParams {
  // If true, a player will be muted by default.
  bool mute = 1;
  // If true, playback will start automatically.
  bool autoplay = 2;
  // If true, a player interface will be hidden by default.
  bool hidden = 3;
}

message GetEpisodePlayerURLResponse {
  // Direct link to the video.
  string player_url = 1;
  // HTML embed code in Iframe format.
  string html = 2;
}

message GetEpisodeManifestsRequest {
    // ID of the episode.
    string episode_id = 1;
}

message GetEpisodeManifestsResponse {
    repeated Manifest manifests = 1;
}
