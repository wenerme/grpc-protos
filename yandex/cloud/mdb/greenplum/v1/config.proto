syntax = "proto3";

package yandex.cloud.mdb.greenplum.v1;

import "google/protobuf/wrappers.proto";

import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplum";
option java_package = "yandex.cloud.api.mdb.greenplum.v1";

// A list of computational resources allocated to a host.

message Resources {

  // ID of the preset for computational resources allocated to a host.
  //
  // Available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
  string resource_preset_id = 1;

  // Volume of the storage used by the host, in bytes.
  int64 disk_size = 2;

  // Type of the storage used by the host: `network-hdd`, `network-ssd` or `local-ssd`.
  string disk_type_id = 3;
}

// Route server configuration.

message ConnectionPoolerConfig {

  // Route server pool mode.

  enum PoolMode {
    POOL_MODE_UNSPECIFIED = 0;

    // Assign server connection to a client until it disconnects. Default value.
    SESSION = 1;

    // Assign server connection to a client for a transaction processing.
    TRANSACTION = 2;
  }

  // Route server pool mode.
  PoolMode mode = 1;

  // The number of servers in the server pool. Clients are placed in a wait queue when all servers are busy.
  //
  // Set to zero to disable the limit.
  google.protobuf.Int64Value size = 2;

  // Server pool idle timeout, in seconds.
  //
  // A server connection closes after being idle for the specified time.
  //
  // Set to zero to disable the limit.
  google.protobuf.Int64Value client_idle_timeout = 3;
}

// Configuration of the master subcluster.

message MasterSubclusterConfig {

  // Computational resources allocated to Greenplum® master subcluster hosts.
  Resources resources = 1;
}

// Configuration of the segment subcluster.

message SegmentSubclusterConfig {

  // Computational resources allocated to Greenplum® segment subcluster hosts.
  Resources resources = 1;
}

enum LogStatement {
    LOG_STATEMENT_UNSPECIFIED = 0;

    // None statements are logged.
    NONE = 1;

    // Logs all data definition commands like `CREATE`, `ALTER`, and `DROP`. Default value.
    DDL = 2;

    // Logs all `DDL` statements, plus `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY FROM`.
    MOD = 3;

    // Logs all statements.
    ALL = 4;
}

message GreenplumConfig6_17 {
  // Maximum number of inbound connections on master segment.
  google.protobuf.Int64Value max_connections = 1;

  // The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
  //
  // More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment).
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query).
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // The maximum number of temporary spill files allowed per query at each segment.
  //
  // Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
  //
  // The current query is terminated if the limit is exceeded.
  //
  // Set to zero to disable the limit.
  //
  // Master session reloads if the parameter changes.
  //
  // Default value is 10000.
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query).
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // The maximum number of transactions that can be in the `prepared` state simultaneously.
  //
  // More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Whether the spill files are compressed or not.
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression).
  google.protobuf.BoolValue gp_workfile_compression = 7;
}

message GreenplumConfig6_19 {
  // Maximum number of inbound connections on master segment.
  google.protobuf.Int64Value max_connections = 1;

  // The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
  //
  // More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment).
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query).
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // The maximum number of temporary spill files allowed per query at each segment.
  //
  // Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
  //
  // The current query is terminated if the limit is exceeded.
  //
  // Set to zero to disable the limit.
  //
  // Master session reloads if the parameter changes.
  //
  // Default value is 10000.
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query).
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // The maximum number of transactions that can be in the `prepared` state simultaneously.
  //
  // More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Whether the spill files are compressed or not.
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression).
  google.protobuf.BoolValue gp_workfile_compression = 7;

  // The maximum memory limit for a query, in bytes.
  //
  // Helps to avoid out-of-memory errors on a segment host during query processing as a result of setting `statement_mem` too high.
  //
  // Taking into account the configuration of a single segment host, calculate [max_statement_mem] as follows: `seghost_physical_memory` / `average_number_concurrent_queries`.
  //
  // When changing both [max_statement_mem] and `statement_mem`, [max_statement_mem] must be changed first, or listed first in the `postgresql.conf` file.
  //
  // Default value is 2097152000 (2000 MB).
  //
  // More info in [Greenplum® documentation](https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem).
  google.protobuf.Int64Value max_statement_mem = 8; // in bytes

  // Logged SQL statements.
  //
  // `PREPARE` and `EXPLAIN ANALYZE` statements are also logged if their contained command belongs to an appropriate type.
  //
  // More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_statement).
  //
  LogStatement log_statement = 9;
}

// Configuration settings version 6.17
message GreenplumConfigSet6_17 {
  // Effective settings for a Greenplum® cluster (a combination of settings defined in [GreenplumConfigSet6_17.user_config] and [GreenplumConfigSet6_17.default_config]).
  GreenplumConfig6_17 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum® cluster.
  GreenplumConfig6_17 user_config = 2;

  // Default configuration for a Greenplum® cluster.
  GreenplumConfig6_17 default_config = 3;
}

// Configuration settings version 6.19
message GreenplumConfigSet6_19 {
  // Effective settings for a Greenplum® cluster (a combination of settings defined in [GreenplumConfigSet6_19.user_config] and [GreenplumConfigSet6_19.default_config]).
  GreenplumConfig6_19 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum® cluster.
  GreenplumConfig6_19 user_config = 2;

  // Default configuration for a Greenplum® cluster.
  GreenplumConfig6_19 default_config = 3;
}

message ConnectionPoolerConfigSet {
  // Effective settings for an Odyssey® pooler (a combination of settings defined in [ConnectionPoolerConfigSet.user_config] and [ConnectionPoolerConfigSet.default_config]).
  ConnectionPoolerConfig effective_config = 1 [(required) = true];

  // User-defined settings for an Odyssey® pooler.
  ConnectionPoolerConfig user_config = 2;

  // Default configuration for an Odyssey® pooler.
  ConnectionPoolerConfig default_config = 3;
}
