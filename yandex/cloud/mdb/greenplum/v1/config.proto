syntax = "proto3";

package yandex.cloud.mdb.greenplum.v1;

import "google/protobuf/wrappers.proto";

import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplum";
option java_package = "yandex.cloud.api.mdb.greenplum.v1";

// A list of computational resources allocated to a host.
message Resources {

  // ID of the preset for computational resources allocated to a host.
  // Available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
  string resource_preset_id = 1;

  // Volume of the storage used by the host, in bytes.
  int64 disk_size = 2;

  // Type of the storage used by the host: `network-hdd`, `network-ssd` or `local-ssd`.
  string disk_type_id = 3;
}

// Route server configuration.
message ConnectionPoolerConfig {

  // Route server pool mode.
  enum PoolMode {
    POOL_MODE_UNSPECIFIED = 0;

    // Assign server connection to a client until it disconnects. Default value.
    SESSION = 1;

    // Assign server connection to a client for a transaction processing.
    TRANSACTION = 2;
  }

  // Route server pool mode.
  PoolMode mode = 1;

  // The number of servers in the server pool. Clients are placed in a wait queue when all servers are busy.
  // Set to zero to disable the limit.
  google.protobuf.Int64Value size = 2;

  // Server pool idle timeout, in seconds. A server connection closes after it has been idle for the specified duration.
  // Set to zero to disable the limit.
  google.protobuf.Int64Value client_idle_timeout = 3;
}

// Configuration of the master subcluster.
message MasterSubclusterConfig {

  // Computational resources allocated to Greenplum® master subcluster hosts.
  Resources resources = 1;
}

// Configuration of the segment subcluster.
message SegmentSubclusterConfig {

  // Computational resources allocated to Greenplum® segment subcluster hosts.
  Resources resources = 1; 
}


message GreenplumConfig6_17 {
  // Maximum number of inbound connections on master segment
  google.protobuf.Int64Value max_connections = 1;

  // Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
  // https://www.postgresql.org/docs/current/runtime-config-replication.html
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
  // Spill files are created when executing a query that requires more memory than it is allocated.
  // The current query is terminated when the limit is exceeded.
  // Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query
  // Default value is 10000
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // Sets the maximum number of transactions that can be in the "prepared" state simultaneously
  // https://www.postgresql.org/docs/9.6/runtime-config-resource.html
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression
  google.protobuf.BoolValue gp_workfile_compression = 7;
}

message GreenplumConfig6_19 {
  // Maximum number of inbound connections on master segment
  google.protobuf.Int64Value max_connections = 1;

  // Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
  // https://www.postgresql.org/docs/current/runtime-config-replication.html
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
  // Spill files are created when executing a query that requires more memory than it is allocated.
  // The current query is terminated when the limit is exceeded.
  // Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query
  // Default value is 10000
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // Sets the maximum number of transactions that can be in the "prepared" state simultaneously
  // https://www.postgresql.org/docs/9.6/runtime-config-resource.html
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression
  google.protobuf.BoolValue gp_workfile_compression = 7;
}

message GreenplumConfigSet6_17 {
  // Effective settings for a Greenplum (a combination of settings defined
  // in [user_config] and [default_config]).
  GreenplumConfig6_17 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum.
  GreenplumConfig6_17 user_config = 2;

  // Default configuration for a Greenplum.
  GreenplumConfig6_17 default_config = 3;
}


message GreenplumConfigSet6_19 {
  // Effective settings for a Greenplum (a combination of settings defined
  // in [user_config] and [default_config]).
  GreenplumConfig6_19 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum.
  GreenplumConfig6_19 user_config = 2;

  // Default configuration for a Greenplum.
  GreenplumConfig6_19 default_config = 3;
}

message ConnectionPoolerConfigSet {
  // Effective settings for a odyssey (a combination of settings defined
  // in [user_config] and [default_config]).
  ConnectionPoolerConfig effective_config = 1 [(required) = true];

  // User-defined settings for a odyssey.
  ConnectionPoolerConfig user_config = 2;

  // Default configuration for a odyssey.
  ConnectionPoolerConfig default_config = 3;
}
