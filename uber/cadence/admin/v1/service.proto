// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package uber.cadence.admin.v1;

option go_package = "github.com/uber/cadence-idl/go/proto/admin/v1;adminv1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "uber/cadence/api/v1/common.proto";
import "uber/cadence/api/v1/visibility.proto";
import "uber/cadence/admin/v1/cluster.proto";
import "uber/cadence/admin/v1/history.proto";
import "uber/cadence/admin/v1/queue.proto";
import "uber/cadence/admin/v1/replication.proto";

// AdminAPI provides advanced APIs for debugging and analysis with admin privilege.
service AdminAPI {
  // DescribeWorkflowExecution returns information about the internal states of workflow execution.
  rpc DescribeWorkflowExecution(DescribeWorkflowExecutionRequest) returns (DescribeWorkflowExecutionResponse);

  // DescribeHistoryHost returns information about the internal states of a history host.
  rpc DescribeHistoryHost(DescribeHistoryHostRequest) returns (DescribeHistoryHostResponse);

  // DescribeShardDistribution returns information about shard distribution
  rpc DescribeShardDistribution(DescribeShardDistributionRequest) returns (DescribeShardDistributionResponse);

  // CloseShard closes shard.
  rpc CloseShard(CloseShardRequest) returns (CloseShardResponse);

  // RemoveTask removes task.
  rpc RemoveTask(RemoveTaskRequest) returns (RemoveTaskResponse);

  // ResetQueue resets queue.
  rpc ResetQueue(ResetQueueRequest) returns (ResetQueueResponse);

  // DescribeQueue describes queue.
  rpc DescribeQueue(DescribeQueueRequest) returns(DescribeQueueResponse);

  // Returns the raw history of specified workflow execution.
  // It fails with 'EntityNotExistError' if specified workflow execution in unknown to the service.
  // StartEventId defines the beginning of the event to fetch. The first event is inclusive.
  // EndEventId and EndEventVersion defines the end of the event to fetch. The end event is exclusive.
  rpc GetWorkflowExecutionRawHistoryV2(GetWorkflowExecutionRawHistoryV2Request) returns(GetWorkflowExecutionRawHistoryV2Response);

  // GetReplicationMessages returns new replication tasks since the read level provided in the token.
  rpc GetReplicationMessages(GetReplicationMessagesRequest) returns(GetReplicationMessagesResponse);

  // GetDLQReplicationMessages return replication messages based on DLQ info.
  rpc GetDLQReplicationMessages(GetDLQReplicationMessagesRequest) returns (GetDLQReplicationMessagesResponse);

  // GetDomainReplicationMessages returns new domain replication tasks since last retrieved task id.
  rpc GetDomainReplicationMessages (GetDomainReplicationMessagesRequest) returns (GetDomainReplicationMessagesResponse);

  // ReapplyEvents applies stale events to the current workflow and current run.
  rpc ReapplyEvents(ReapplyEventsRequest) returns (ReapplyEventsResponse);

  // AddSearchAttribute whitelist search attribute in request.
  rpc AddSearchAttribute (AddSearchAttributeRequest) returns (AddSearchAttributeResponse);

  // DescribeCluster returns information about Cadence cluster.
  rpc DescribeCluster(DescribeClusterRequest) returns (DescribeClusterResponse);

  // CountDLQMessages returns message count in DLQ.
  rpc CountDLQMessages(CountDLQMessagesRequest) returns (CountDLQMessagesResponse);

  // ReadDLQMessages returns messages from DLQ.
  rpc ReadDLQMessages(ReadDLQMessagesRequest) returns (ReadDLQMessagesResponse);

  // PurgeDLQMessages purges messages from DLQ.
  rpc PurgeDLQMessages(PurgeDLQMessagesRequest) returns (PurgeDLQMessagesResponse);

  // MergeDLQMessages merges messages from DLQ.
  rpc MergeDLQMessages(MergeDLQMessagesRequest) returns (MergeDLQMessagesResponse);

  // RefreshWorkflowTasks refreshes all tasks of a workflow.
  rpc RefreshWorkflowTasks(RefreshWorkflowTasksRequest) returns (RefreshWorkflowTasksResponse);

  // ResendReplicationTasks requests replication tasks from remote cluster and apply tasks to current cluster.
  rpc ResendReplicationTasks(ResendReplicationTasksRequest) returns (ResendReplicationTasksResponse);

  // GetCrossClusterTasks return cross cluster tasks based on cluster name.
  rpc GetCrossClusterTasks(GetCrossClusterTasksRequest) returns (GetCrossClusterTasksResponse);

  // RespondCrossClusterTasksCompleted responds the result of processing cross cluster tasks.
  rpc RespondCrossClusterTasksCompleted(RespondCrossClusterTasksCompletedRequest) returns (RespondCrossClusterTasksCompletedResponse);

  // GetDynamicConfig returns values associated with a specified dynamic config parameter.
  rpc GetDynamicConfig(GetDynamicConfigRequest) returns (GetDynamicConfigResponse);

  // UpdateDynamicConfig is used to update one or more values associated with a specified dynamic config parameter.
  rpc UpdateDynamicConfig(UpdateDynamicConfigRequest) returns (UpdateDynamicConfigResponse);

  // RestoreDynamicConfig is used to remove one or all values associated with a specified dynamic config parameter.
  rpc RestoreDynamicConfig(RestoreDynamicConfigRequest) returns (RestoreDynamicConfigResponse);

  // ListDynamicConfig returns all dynamic config parameters and associated values.
  rpc ListDynamicConfig(ListDynamicConfigRequest) returns (ListDynamicConfigResponse);

  // DeleteWorkflow is used to delete a workflow with given domainName, workflowID and runID
  rpc DeleteWorkflow(DeleteWorkflowRequest) returns (DeleteWorkflowResponse);

  // MaintainCorruptWorkflow deletes a workflow if its history is corrupt due to underlying DB issues (e.g. Cassandra resurrections)
  rpc MaintainCorruptWorkflow(MaintainCorruptWorkflowRequest) returns (MaintainCorruptWorkflowResponse);

  // GetIsolationGroups
  rpc GetGlobalIsolationGroups(GetGlobalIsolationGroupsRequest) returns (GetGlobalIsolationGroupsResponse);

  // UpdateGlobalIsolationGroups
  rpc UpdateGlobalIsolationGroups(UpdateGlobalIsolationGroupsRequest) returns (UpdateGlobalIsolationGroupsResponse);

  // GetDomainIsolationGroups
  rpc GetDomainIsolationGroups(GetDomainIsolationGroupsRequest) returns (GetDomainIsolationGroupsResponse);

  // UpdateDomainIsolationGroups
  rpc UpdateDomainIsolationGroups(UpdateDomainIsolationGroupsRequest) returns (UpdateDomainIsolationGroupsResponse);

  // GetDomainAsyncWorkflowConfiguraton
  rpc GetDomainAsyncWorkflowConfiguraton(GetDomainAsyncWorkflowConfiguratonRequest) returns (GetDomainAsyncWorkflowConfiguratonResponse);

  // UpdateDomainAsyncWorkflowConfiguraton
  rpc UpdateDomainAsyncWorkflowConfiguraton(UpdateDomainAsyncWorkflowConfiguratonRequest) returns (UpdateDomainAsyncWorkflowConfiguratonResponse);
}

message DescribeWorkflowExecutionRequest {
  string domain = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
}

message DescribeWorkflowExecutionResponse {
  int32 shard_id = 1;
  string history_addr = 2;
  string mutable_state_in_cache = 3;
  string mutable_state_in_database = 4;
}

message DescribeHistoryHostRequest {
  oneof describe_by {
    string host_address = 1;
    int32 shard_id = 2;
    api.v1.WorkflowExecution workflow_execution = 3;
  }
}

message DescribeShardDistributionRequest {
  int32 page_size = 1;
  int32 page_id = 2;
}

message DescribeShardDistributionResponse {
  int32 number_of_shards = 1;
  map<int32, string> shards = 2;
}

message DescribeHistoryHostResponse {
  int32 number_of_shards = 1;
  repeated int32 shard_ids = 2;
  DomainCacheInfo domain_cache = 3;
  string shard_controller_status = 4;
  string address = 5;
}

message CloseShardRequest {
  int32 shard_id = 1;
}

message CloseShardResponse {
}

message RemoveTaskRequest {
  int32 shard_id = 1;
  TaskType task_type = 2;
  int64 task_id = 3;
  google.protobuf.Timestamp visibility_time = 4;
  string cluster_name = 5;
}

message RemoveTaskResponse {
}

message ResetQueueRequest {
  int32 shard_id = 1;
  string cluster_name = 2;
  TaskType task_type = 3;
}

message ResetQueueResponse {
}

message DescribeQueueRequest {
  int32 shard_id = 1;
  string cluster_name = 2;
  TaskType task_type = 3;
}

message DescribeQueueResponse {
  repeated string processing_queue_states = 1;
}

message GetWorkflowExecutionRawHistoryV2Request {
  string domain = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
  VersionHistoryItem start_event = 3;
  VersionHistoryItem end_event = 4;
  int32 page_size = 5;
  bytes next_page_token = 6;
}

message GetWorkflowExecutionRawHistoryV2Response {
  bytes next_page_token = 1;
  repeated api.v1.DataBlob history_batches = 2;
  VersionHistory version_history = 3;
}

message GetReplicationMessagesRequest {
  repeated ReplicationToken tokens = 1;
  string cluster_name = 2;
}

message GetReplicationMessagesResponse {
  map<int32, ReplicationMessages> shard_messages = 1;
}

message GetDLQReplicationMessagesRequest {
  repeated ReplicationTaskInfo task_infos = 1;
}

message GetDLQReplicationMessagesResponse {
  repeated ReplicationTask replication_tasks = 1;
}

message GetDomainReplicationMessagesRequest {
  // last_retrieved_message_id is where the next fetch should begin with.
  google.protobuf.Int64Value last_retrieved_message_id = 1;
  // last_processed_message_id is the last messageId that is processed on the passive side.
  // This can be different than last_retrieved_message_id if passive side supports prefetching messages.
  google.protobuf.Int64Value last_processed_message_id = 2;
  // cluster_name is the name of the pulling cluster.
  string cluster_name = 3;
}

message GetDomainReplicationMessagesResponse {
  ReplicationMessages messages = 1;
}

// ReapplyEventsRequest is the request for reapply events API.
message ReapplyEventsRequest {
  string domain = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
  api.v1.DataBlob events = 3;
}

message ReapplyEventsResponse {
}

message AddSearchAttributeRequest {
  map<string, api.v1.IndexedValueType> search_attribute = 1;
  string security_token = 2;
}

message AddSearchAttributeResponse {
}

message DescribeClusterRequest {
}

message DescribeClusterResponse {
  api.v1.SupportedClientVersions supported_client_versions = 1;
  MembershipInfo membership_info = 2;
  map<string,PersistenceInfo> persistence_info = 3;
}

message CountDLQMessagesRequest {
  bool force_fetch = 1;
}

message CountDLQMessagesResponse {
  repeated HistoryDLQCountEntry history = 1;
  int64 domain = 2;
}

message ReadDLQMessagesRequest {
  DLQType type = 1;
  int32 shard_id = 2;
  string source_cluster = 3;
  google.protobuf.Int64Value inclusive_end_message_id = 4;
  int32 page_size = 5;
  bytes next_page_token = 6;
}

message ReadDLQMessagesResponse {
  DLQType type = 1;
  repeated ReplicationTask replication_tasks = 2;
  repeated ReplicationTaskInfo replication_tasks_info = 3;
  bytes next_page_token = 4;
}

message PurgeDLQMessagesRequest {
  DLQType type = 1;
  int32 shard_id = 2;
  string source_cluster = 3;
  google.protobuf.Int64Value inclusive_end_message_id = 4;
}

message PurgeDLQMessagesResponse {
}

message MergeDLQMessagesRequest {
  DLQType type = 1;
  int32 shard_id = 2;
  string source_cluster = 3;
  google.protobuf.Int64Value inclusive_end_message_id = 4;
  int32 page_size = 5;
  bytes next_page_token = 6;
}

message MergeDLQMessagesResponse {
  bytes next_page_token = 1;
}

message RefreshWorkflowTasksRequest {
  string domain = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
}

message RefreshWorkflowTasksResponse {
}

message ResendReplicationTasksRequest {
  string domain_id = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
  string remote_cluster = 3;
  VersionHistoryItem start_event = 4;
  VersionHistoryItem end_event = 5;
}

message ResendReplicationTasksResponse {
}

message GetCrossClusterTasksRequest {
  repeated int32 shard_ids = 1;
  string target_cluster = 2;
}

message GetCrossClusterTasksResponse {
  map<int32, CrossClusterTaskRequests> tasks_by_shard = 1;
  map<int32, GetTaskFailedCause> failed_cause_by_shard = 2;
}

message RespondCrossClusterTasksCompletedRequest {
  int32 shard_id = 1;
  string target_cluster = 2;
  repeated CrossClusterTaskResponse task_responses = 3;
  bool fetch_new_tasks = 4;
}

message RespondCrossClusterTasksCompletedResponse {
  CrossClusterTaskRequests tasks = 1;
}

/* If get_all is True, then all provided filters are ignored and all values associated with config_name
will be returned. If get_all is False and no filters are specified (or no filter match), fallback value
will be returned. If get_all is False and a filter(s) is specified, value that matches filter will be returned.
If config_name cannot be found in database, default value will be returned. */
message GetDynamicConfigRequest {
	string config_name = 1;
  repeated DynamicConfigFilter filters = 2;
}

message GetDynamicConfigResponse {
	api.v1.DataBlob value = 1;
}

/* If filters field is not specified in DynamicConfigValue, value will update fallback value which supersedes
the default value defined in codebase. */
message UpdateDynamicConfigRequest {
	string config_name = 1;
	repeated DynamicConfigValue config_values = 2;
}

message UpdateDynamicConfigResponse {
}

// If no filters are specified, all values associated with config_name will be removed.
message RestoreDynamicConfigRequest {
	string config_name = 1;
	repeated DynamicConfigFilter filters = 2;
}

message RestoreDynamicConfigResponse {
}

message DeleteWorkflowRequest {
  string domain = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
}

message DeleteWorkflowResponse {
  bool history_deleted = 1;
  bool executions_deleted = 2;
  bool visibility_deleted = 3;
}

message MaintainCorruptWorkflowRequest {
  string domain = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
}

message MaintainCorruptWorkflowResponse {
  bool history_deleted = 1;
  bool executions_deleted = 2;
  bool visibility_deleted = 3;
}

message ListDynamicConfigRequest {
  string config_name = 1;
}

message ListDynamicConfigResponse {
	repeated DynamicConfigEntry entries = 1;
}

message DynamicConfigEntry {
	string name = 1;
	repeated DynamicConfigValue values = 3;
}

message DynamicConfigValue {
	api.v1.DataBlob value = 1;
	repeated DynamicConfigFilter filters = 2;
}

message DynamicConfigFilter {
	string name = 1;
	api.v1.DataBlob value = 2;
}

// Global
message GetGlobalIsolationGroupsRequest{}

message GetGlobalIsolationGroupsResponse{
    api.v1.IsolationGroupConfiguration isolation_groups = 1;
}

message UpdateGlobalIsolationGroupsRequest{
    api.v1.IsolationGroupConfiguration isolation_groups = 1;
}

message UpdateGlobalIsolationGroupsResponse{ }


// For domains
message GetDomainIsolationGroupsRequest{
    string domain = 1;
}

message GetDomainIsolationGroupsResponse{
    api.v1.IsolationGroupConfiguration isolation_groups = 1;
}

message UpdateDomainIsolationGroupsRequest{
    string domain = 1;
    api.v1.IsolationGroupConfiguration isolation_groups = 2;
}

message UpdateDomainIsolationGroupsResponse{}

// Async workflow configuration request/response payloads
message GetDomainAsyncWorkflowConfiguratonRequest {
    string domain = 1;
}

message GetDomainAsyncWorkflowConfiguratonResponse {
    api.v1.AsyncWorkflowConfiguration configuration = 1;
}

message UpdateDomainAsyncWorkflowConfiguratonRequest {
    string domain = 1;
    api.v1.AsyncWorkflowConfiguration configuration = 2;
}

message UpdateDomainAsyncWorkflowConfiguratonResponse {}
