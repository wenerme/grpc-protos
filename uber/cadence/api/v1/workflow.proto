// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package uber.cadence.api.v1;

option go_package = "github.com/uber/cadence-idl/go/proto/api/v1;apiv1";
option java_multiple_files = true;
option java_outer_classname = "WorkflowProto";
option java_package = "com.uber.cadence.api.v1";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "uber/cadence/api/v1/common.proto";
import "uber/cadence/api/v1/tasklist.proto";

message WorkflowExecutionInfo {
  WorkflowExecution workflow_execution = 1;
  WorkflowType type = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp close_time = 4;
  WorkflowExecutionCloseStatus close_status = 5;
  int64 history_length = 6;
  ParentExecutionInfo parent_execution_info = 7;
  google.protobuf.Timestamp execution_time = 8;
  Memo memo = 9;
  SearchAttributes search_attributes = 10;
  ResetPoints auto_reset_points = 11;
  string task_list = 12;
  bool is_cron = 13;
}

message WorkflowExecutionConfiguration {
  TaskList task_list = 1;
  google.protobuf.Duration execution_start_to_close_timeout = 2;
  google.protobuf.Duration task_start_to_close_timeout = 3;
}

message ParentExecutionInfo {
  string domain_id = 1;
  string domain_name = 2;
  api.v1.WorkflowExecution workflow_execution = 3;
  int64 initiated_id = 4;
}

message ExternalExecutionInfo {
  api.v1.WorkflowExecution workflow_execution = 1;
  int64 initiated_id = 2;
}

message PendingActivityInfo {
  string activity_id = 1;
  ActivityType activity_type = 2;
  PendingActivityState state = 3;
  Payload heartbeat_details = 4;
  google.protobuf.Timestamp last_heartbeat_time = 5;
  google.protobuf.Timestamp last_started_time = 6;
  int32 attempt = 7;
  int32 maximum_attempts = 8;
  google.protobuf.Timestamp scheduled_time = 9;
  google.protobuf.Timestamp expiration_time = 10;
  Failure last_failure = 11;
  string last_worker_identity = 12;
}

message PendingChildExecutionInfo {
  WorkflowExecution workflow_execution = 1;
  string workflow_type_name = 2;
  int64 initiated_id = 3;
  ParentClosePolicy parent_close_policy = 4;
  string domain = 5;
}

message PendingDecisionInfo {
  PendingDecisionState state = 1;
  google.protobuf.Timestamp scheduled_time = 2;
  google.protobuf.Timestamp started_time = 3;
  int32 attempt = 4;
  google.protobuf.Timestamp original_scheduled_time = 5;
}

message ActivityLocalDispatchInfo {
  string activity_id = 1;
  google.protobuf.Timestamp scheduled_time = 2;
  google.protobuf.Timestamp started_time = 3;
  google.protobuf.Timestamp scheduled_time_of_this_attempt = 4;
  bytes task_token = 5;
}

message ResetPoints {
  repeated ResetPointInfo points = 1;
}

message ResetPointInfo {
  string binary_checksum = 1;
  string run_id = 2;
  int64 first_decision_completed_id = 3;
  google.protobuf.Timestamp created_time = 4;
  google.protobuf.Timestamp expiring_time = 5;
  bool resettable = 6;
}

enum PendingActivityState {
  PENDING_ACTIVITY_STATE_INVALID = 0;
  PENDING_ACTIVITY_STATE_SCHEDULED = 1;
  PENDING_ACTIVITY_STATE_STARTED = 2;
  PENDING_ACTIVITY_STATE_CANCEL_REQUESTED = 3;
}

enum PendingDecisionState {
  PENDING_DECISION_STATE_INVALID = 0;
  PENDING_DECISION_STATE_SCHEDULED = 1;
  PENDING_DECISION_STATE_STARTED = 2;
}

enum WorkflowIdReusePolicy {
  WORKFLOW_ID_REUSE_POLICY_INVALID = 0;

  // Allow start a workflow execution using the same workflow ID,
  // when workflow not running, and the last execution close state is in [terminated, cancelled, timeouted, failed].
  WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY = 1;

  // Allow start a workflow execution using the same workflow ID, when workflow not running.
  WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE = 2;

  // Do not allow start a workflow execution using the same workflow ID at all.
  WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE = 3;

  // If a workflow is running using the same workflow ID, terminate it and start a new one.
  WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING = 4;
}

enum ParentClosePolicy {
  PARENT_CLOSE_POLICY_INVALID = 0;

  // Abandon means not doing anything on the child workflow.
  PARENT_CLOSE_POLICY_ABANDON = 1;

  // Cancel means requesting cancellation on the child workflow.
  PARENT_CLOSE_POLICY_REQUEST_CANCEL = 2;

  // Terminate means terminating the child workflow.
  PARENT_CLOSE_POLICY_TERMINATE = 3;
}

enum WorkflowExecutionCloseStatus {
  WORKFLOW_EXECUTION_CLOSE_STATUS_INVALID = 0;
  WORKFLOW_EXECUTION_CLOSE_STATUS_COMPLETED = 1;
  WORKFLOW_EXECUTION_CLOSE_STATUS_FAILED = 2;
  WORKFLOW_EXECUTION_CLOSE_STATUS_CANCELED = 3;
  WORKFLOW_EXECUTION_CLOSE_STATUS_TERMINATED = 4;
  WORKFLOW_EXECUTION_CLOSE_STATUS_CONTINUED_AS_NEW = 5;
  WORKFLOW_EXECUTION_CLOSE_STATUS_TIMED_OUT = 6;
}

enum ContinueAsNewInitiator {
  CONTINUE_AS_NEW_INITIATOR_INVALID = 0;
  CONTINUE_AS_NEW_INITIATOR_DECIDER = 1;
  CONTINUE_AS_NEW_INITIATOR_RETRY_POLICY = 2;
  CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE = 3;
}

enum TimeoutType {
  TIMEOUT_TYPE_INVALID = 0;
  TIMEOUT_TYPE_START_TO_CLOSE = 1;
  TIMEOUT_TYPE_SCHEDULE_TO_START = 2;
  TIMEOUT_TYPE_SCHEDULE_TO_CLOSE = 3;
  TIMEOUT_TYPE_HEARTBEAT = 4;
}

enum DecisionTaskTimedOutCause {
  DECISION_TASK_TIMED_OUT_CAUSE_INVALID = 0;
  DECISION_TASK_TIMED_OUT_CAUSE_TIMEOUT = 1;
  DECISION_TASK_TIMED_OUT_CAUSE_RESET = 2;
}

enum DecisionTaskFailedCause {
  DECISION_TASK_FAILED_CAUSE_INVALID = 0;
  DECISION_TASK_FAILED_CAUSE_UNHANDLED_DECISION = 1;
  DECISION_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES = 2;
  DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES = 3;
  DECISION_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES = 4;
  DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES = 5;
  DECISION_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES = 6;
  DECISION_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES = 7;
  DECISION_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES = 8;
  DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES = 9;
  DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES = 10;
  DECISION_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES = 11;
  DECISION_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID = 12;
  DECISION_TASK_FAILED_CAUSE_RESET_STICKY_TASK_LIST = 13;
  DECISION_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE = 14;
  DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES = 15;
  DECISION_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES = 16;
  DECISION_TASK_FAILED_CAUSE_FORCE_CLOSE_DECISION = 17;
  DECISION_TASK_FAILED_CAUSE_FAILOVER_CLOSE_DECISION = 18;
  DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE = 19;
  DECISION_TASK_FAILED_CAUSE_RESET_WORKFLOW = 20;
  DECISION_TASK_FAILED_CAUSE_BAD_BINARY = 21;
  DECISION_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID = 22;
  DECISION_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES = 23;
}

enum ChildWorkflowExecutionFailedCause {
  CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID = 0;
  CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_RUNNING = 1;
}

enum CancelExternalWorkflowExecutionFailedCause {
  CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID = 0;
  CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 1;
}

enum SignalExternalWorkflowExecutionFailedCause {
  SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID = 0;
  SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 1;
}
