// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package uber.cadence.api.v1;

option go_package = "github.com/uber/cadence-idl/go/proto/api/v1;apiv1";
option java_multiple_files = true;
option java_outer_classname = "VisibilityServiceProto";
option java_package = "com.uber.cadence.api.v1";

import "uber/cadence/api/v1/visibility.proto";
import "uber/cadence/api/v1/workflow.proto";

service VisibilityAPI {
  // ListWorkflowExecutions is a visibility API to list workflow executions in a specific domain.
  rpc ListWorkflowExecutions(ListWorkflowExecutionsRequest) returns (ListWorkflowExecutionsResponse);

  // ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific domain.
  rpc ListOpenWorkflowExecutions(ListOpenWorkflowExecutionsRequest) returns (ListOpenWorkflowExecutionsResponse);

  // ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific domain.
  rpc ListClosedWorkflowExecutions(ListClosedWorkflowExecutionsRequest) returns (ListClosedWorkflowExecutionsResponse);

  // ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific domain.
  rpc ListArchivedWorkflowExecutions(ListArchivedWorkflowExecutionsRequest) returns (ListArchivedWorkflowExecutionsResponse);

  // ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific domain without order.
  rpc ScanWorkflowExecutions(ScanWorkflowExecutionsRequest) returns (ScanWorkflowExecutionsResponse);

  // CountWorkflowExecutions is a visibility API to count of workflow executions in a specific domain.
  rpc CountWorkflowExecutions(CountWorkflowExecutionsRequest) returns (CountWorkflowExecutionsResponse);

  // GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs.
  rpc GetSearchAttributes(GetSearchAttributesRequest) returns (GetSearchAttributesResponse);
}


message ListWorkflowExecutionsRequest {
  string domain = 1;
  int32 page_size = 2;
  bytes next_page_token = 3;
  string query = 4;
}

message ListWorkflowExecutionsResponse {
  repeated WorkflowExecutionInfo executions = 1;
  bytes next_page_token = 2;
}

message ListOpenWorkflowExecutionsRequest {
  string domain = 1;
  int32 page_size = 2;
  bytes next_page_token = 3;
  StartTimeFilter start_time_filter = 4;
  oneof filters {
    WorkflowExecutionFilter execution_filter = 5;
    WorkflowTypeFilter type_filter = 6;
  }
}

message ListOpenWorkflowExecutionsResponse {
  repeated WorkflowExecutionInfo executions = 1;
  bytes next_page_token = 2;
}

message ListClosedWorkflowExecutionsRequest {
  string domain = 1;
  int32 page_size = 2;
  bytes next_page_token = 3;
  StartTimeFilter start_time_filter = 4;
  oneof filters {
    WorkflowExecutionFilter execution_filter = 5;
    WorkflowTypeFilter type_filter = 6;
    StatusFilter status_filter = 7;
  }
}

message ListClosedWorkflowExecutionsResponse {
  repeated WorkflowExecutionInfo executions = 1;
  bytes next_page_token = 2;
}

message ListArchivedWorkflowExecutionsRequest {
  string domain = 1;
  int32 page_size = 2;
  bytes next_page_token = 3;
  string query = 4;
}

message ListArchivedWorkflowExecutionsResponse {
  repeated WorkflowExecutionInfo executions = 1;
  bytes next_page_token = 2;
}

message ScanWorkflowExecutionsRequest {
  string domain = 1;
  int32 page_size = 2;
  bytes next_page_token = 3;
  string query = 4;
}

message ScanWorkflowExecutionsResponse {
  repeated WorkflowExecutionInfo executions = 1;
  bytes next_page_token = 2;
}

message CountWorkflowExecutionsRequest {
  string domain = 1;
  string query = 2;
}

message CountWorkflowExecutionsResponse {
  int64 count = 1;
}

message GetSearchAttributesRequest {
}

message GetSearchAttributesResponse {
  map<string, IndexedValueType> keys = 1;
}
