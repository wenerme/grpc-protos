// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package uber.cadence.api.v1;

option go_package = "github.com/uber/cadence-idl/go/proto/api/v1;apiv1";
option java_multiple_files = true;
option java_outer_classname = "QueryProto";
option java_package = "com.uber.cadence.api.v1";

import "uber/cadence/api/v1/common.proto";
import "uber/cadence/api/v1/workflow.proto";

message WorkflowQuery {
  string query_type = 1;
  Payload query_args = 2;
}

message WorkflowQueryResult {
  QueryResultType result_type = 1;
  Payload answer = 2;
  string error_message = 3;
}

message QueryRejected {
  WorkflowExecutionCloseStatus close_status = 1;
}

enum QueryResultType {
  QUERY_RESULT_TYPE_INVALID = 0;
  QUERY_RESULT_TYPE_ANSWERED = 1;
  QUERY_RESULT_TYPE_FAILED = 2;
}

enum QueryRejectCondition {
  QUERY_REJECT_CONDITION_INVALID = 0;

  // QUERY_REJECT_CONDITION_NOT_OPEN indicates that query should be rejected if workflow is not open.
  QUERY_REJECT_CONDITION_NOT_OPEN = 1;

  // QUERY_REJECT_CONDITION_NOT_COMPLETED_CLEANLY indicates that query should be rejected if workflow did not complete cleanly.
  QUERY_REJECT_CONDITION_NOT_COMPLETED_CLEANLY = 2;
}

enum QueryConsistencyLevel {
  QUERY_CONSISTENCY_LEVEL_INVALID = 0;

  // EVENTUAL indicates that query should be eventually consistent.
  QUERY_CONSISTENCY_LEVEL_EVENTUAL = 1;

  // STRONG indicates that any events that came before query should be reflected in workflow state before running query.
  QUERY_CONSISTENCY_LEVEL_STRONG = 2;
}
